name: Docker Build and Push 

on:
  workflow_call:
    inputs:
      TZ_ARG:
        type: string
        required: true
      AUTHOR:
        type: string
        required: true
      VERSION:
        type: string
        required: true
      TAG:
        type: string
        required: true
      GIT_COMMIT:
        type: string
        required: true
      BUILD_TIME:
        type: string
        required: true
      RUN_NUMBER:
        type: string
        required: true
      IS_DEV:
        type: boolean
        required: true
      IS_PROD:
        type: boolean
        required: true
      API_URL_DEV:
        type: string
        required: true
      API_URL_PROD:
        type: string
        required: true
      
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      WEBHOOK_AUTH:
        required: true

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAMESPACE: ${{ secrets.DOCKER_USERNAME }}
      IMAGE_NAME: konsulin-app

    steps:
      - name: Debug - Display Input Variables
        run: |
          echo "=== DOCKER BUILD INPUT VARIABLES ==="
          echo "TZ_ARG: ${{ inputs.TZ_ARG }}"
          echo "AUTHOR: ${{ inputs.AUTHOR }}"
          echo "VERSION: ${{ inputs.VERSION }}"
          echo "TAG: ${{ inputs.TAG }}"
          echo "GIT_COMMIT: ${{ inputs.GIT_COMMIT }}"
          echo "BUILD_TIME: ${{ inputs.BUILD_TIME }}"
          echo "RUN_NUMBER: ${{ inputs.RUN_NUMBER }}"
          echo "IS_DEV: ${{ inputs.IS_DEV }}"
          echo "IS_PROD: ${{ inputs.IS_PROD }}"
          echo "API_URL_DEV: ${{ inputs.API_URL_DEV }}"
          echo "API_URL_PROD: ${{ inputs.API_URL_PROD }}"
          echo ""
          echo "=== SECRETS (masked) ==="
          echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_PASSWORD: [MASKED]"
          echo "WEBHOOK_AUTH: [MASKED]"

      - name: Checkout Source
        uses: actions/checkout@v5

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Get Timestamp (for Dev Tag)
        run: echo "TIMESTAMP=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          if [ "${{ inputs.IS_DEV }}" == "true" ]; then
            echo "Creating .env file for development"
            echo "NEXT_PUBLIC_API_URL=${{ inputs.API_URL_DEV }}" > .env
            echo "NEXT_PUBLIC_WEBHOOK_AUTH=${{ secrets.WEBHOOK_AUTH }}" >> .env
          elif [ "${{ inputs.IS_PROD }}" == "true" ]; then
            echo "Creating .env file for production"
            echo "NEXT_PUBLIC_API_URL=${{ inputs.API_URL_PROD }}" > .env
            echo "NEXT_PUBLIC_WEBHOOK_AUTH=${{ secrets.WEBHOOK_AUTH }}" >> .env
          fi
          echo ".env file created:"
          cat .env

      - name: Build and Push Docker Images
        run: |
          if [ "${{ inputs.IS_DEV }}" == "true" ]; then
            echo "Development build..."
            docker build \
              -t ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:nightly \
              -t ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:dev-${{ env.SHORT_SHA }}-${{ env.TIMESTAMP }} \
              -f Dockerfile \
              --build-arg VERSION="${{ inputs.VERSION }}" \
              --build-arg GIT_COMMIT="${{ inputs.GIT_COMMIT }}" \
              --build-arg TAG="${{ inputs.TAG }}" \
              --build-arg BUILD_TIME="${{ inputs.BUILD_TIME }}" \
              --build-arg AUTHOR="${{ inputs.AUTHOR }}" .

            docker push ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:nightly
            docker push ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:dev-${{ env.SHORT_SHA }}-${{ env.TIMESTAMP }}

          elif [ "${{ inputs.IS_PROD }}" == "true" ]; then
            echo "Production build..."
            docker build \
              -t ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest \
              -t ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ inputs.VERSION }} \
              -f Dockerfile \
              --build-arg VERSION="${{ inputs.VERSION }}" \
              --build-arg GIT_COMMIT="${{ inputs.GIT_COMMIT }}" \
              --build-arg TAG="${{ inputs.TAG }}" \
              --build-arg BUILD_TIME="${{ inputs.BUILD_TIME }}" \
              --build-arg AUTHOR="${{ inputs.AUTHOR }}" .

            docker push ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ inputs.VERSION }}
          else
            echo "No valid environment specified. in productions need 2 conditions: branch is main and tag starts with v"
            exit 1
          fi
