name: Docker (self-hosted)

on:
  workflow_call:
    inputs:
      AUTHOR:
        type: string
        required: true
      VERSION:
        type: string
        required: true
      GIT_COMMIT:
        type: string
        required: true
      BUILD_TIME:
        type: string
        required: true
      RUN_NUMBER:
        type: string
        required: true
      RELEASE_TAG:
        type: string
        required: true
      DOCKER_TAG:
        type: string
        required: true
      API_URL:
        type: string
        required: true
      NODE_MODULES_CACHE_DIR:
        type: string
        default: "/tmp/cache/node_modules"
      NEXTJS_CACHE_DIR:
        type: string
        default: "/tmp/cache/nextjs-cache"

jobs:
  docker:
    name: Docker (self-hosted)
    runs-on: self-hosted

    steps:
    - name: Prepare
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set Up Node JS
      uses: actions/setup-node@v3
      with:
        node-version: 20.16

    - name: Copy Cache
      run: |
        # Copy Node Modules cache if it exists
        if [ -d "${{ inputs.NODE_MODULES_CACHE_DIR }}" ]; then
          echo "Copying Node Modules cache..."
          cp -r "${{ inputs.NODE_MODULES_CACHE_DIR }}" ./node_modules || echo "Failed to copy Node Modules cache."
        else
          echo "Node Modules cache not found."
        fi

        # Copy Next.js cache if it exists
        if [ -d "${{ inputs.NEXTJS_CACHE_DIR }}" ]; then
          echo "Copying Next.js cache..."
          mkdir -p ./.next/cache
          cp -r "${{ inputs.NEXTJS_CACHE_DIR }}"/* ./.next/cache || echo "Failed to copy Next.js cache."
        else
          echo "Next.js cache not found."
        fi

    - name: Installing Packages
      run: npm install

    - name: Build Packages
      run: |
        if [ -f yarn.lock ]; then
          yarn run build
        elif [ -f package-lock.json ]; then
          npm run build
        elif [ -f pnpm-lock.yaml ]; then
          corepack enable pnpm && pnpm run build
        else
          echo "Lockfile not found." && exit 1
        fi

    - name: Update Node Modules Cache
      run: |
        if [ -d "${{ inputs.NODE_MODULES_CACHE_DIR }}" ]; then
          echo "Updating Node Modules cache..."
          cp -r ./node_modules "${{ inputs.NODE_MODULES_CACHE_DIR }}"
        else
          echo "Node Modules cache directory not found. Creating directory."
          mkdir -p "${{ inputs.NODE_MODULES_CACHE_DIR }}"
          cp -r ./node_modules "${{ inputs.NODE_MODULES_CACHE_DIR }}"
        fi

    - name: Update Next.js Cache
      run: |
        if [ -d "${{ inputs.NEXTJS_CACHE_DIR }}" ]; then
          echo "Updating Next.js cache..."
          cp -r ./.next/cache/* "${{ inputs.NEXTJS_CACHE_DIR }}" || echo "Failed to update Next.js cache."
        else
          echo "Next.js cache directory not found. Creating directory."
          mkdir -p "${{ inputs.NEXTJS_CACHE_DIR }}"
          cp -r ./.next/cache/* "${{ inputs.NEXTJS_CACHE_DIR }}"
        fi

    - name: Modify .dockerignore to include .next
      run: |
        # Check if .dockerignore exists
        if [ -f .dockerignore ]; then
          # Remove any lines that match ".next" (remove or modify as needed)
          sed -i '/^\.next$/d' .dockerignore
        fi

    - name: Build Image
      env:
        DOCKER_BUILDKIT: 1
      run: |
        docker build -t konsulin/fe-service:${{ inputs.DOCKER_TAG }} -f ./docker/Dockerfile-ci . \
          --build-arg API_URL=${{ inputs.API_URL }} \
          --build-arg VERSION=${{ inputs.VERSION }} \
          --build-arg GIT_COMMIT=${{ inputs.GIT_COMMIT }} \
          --build-arg TAG=${{ inputs.RELEASE_TAG }} \
          --build-arg AUTHOR=${{ inputs.AUTHOR }} \
          --build-arg RUN_NUMBER=${{ inputs.RUN_NUMBER }} \
          --build-arg BUILD_TIME=${{ inputs.BUILD_TIME }}
